// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReservationService.Context;

namespace ReservationService.Migrations
{
    [DbContext(typeof(ReservationContext))]
    [Migration("20221229111548_User")]
    partial class User
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReservationService.Models.Replications.Airport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("airport_id");

                    b.Property<long>("AirportAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("airport_address_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AirportAddressId")
                        .IsUnique();

                    b.ToTable("airport");
                });

            modelBuilder.Entity("ReservationService.Models.Replications.AirportAddress", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("airport_address_id");

                    b.Property<int>("AirportId")
                        .HasColumnType("int")
                        .HasColumnName("airport_id");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("zip");

                    b.HasKey("Id");

                    b.ToTable("airport_address");
                });

            modelBuilder.Entity("ReservationService.Models.Replications.Flight", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("flight_id");

                    b.Property<long>("AirplaneId")
                        .HasColumnType("bigint")
                        .HasColumnName("airplane_id");

                    b.Property<long>("ArrivalAirportId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("arrival_time");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal")
                        .HasColumnName("cost");

                    b.Property<long>("DepartureAirportId")
                        .HasColumnType("bigint")
                        .HasColumnName("departure_airport_id");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("departure_time");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("flight");
                });

            modelBuilder.Entity("ReservationService.Models.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("reservation_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("ReservationService.Models.ReservationTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_ticket_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentIdentifier")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("document_identifier");

                    b.Property<short>("Line")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("PersonBirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("person_birth_date");

                    b.Property<string>("PersonLastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("person_last_name");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("person_name");

                    b.Property<string>("PersonSurname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("person_surname");

                    b.Property<long>("ReservationId")
                        .HasColumnType("bigint");

                    b.Property<short>("Seat")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("ReservationService.Models.Replications.Airport", b =>
                {
                    b.HasOne("ReservationService.Models.Replications.AirportAddress", "AirportAddress")
                        .WithOne("Airport")
                        .HasForeignKey("ReservationService.Models.Replications.Airport", "AirportAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirportAddress");
                });

            modelBuilder.Entity("ReservationService.Models.Replications.Flight", b =>
                {
                    b.HasOne("ReservationService.Models.Replications.Airport", "ArrivalAirport")
                        .WithMany("ArrivalFlights")
                        .HasForeignKey("ArrivalAirportId")
                        .HasConstraintName("fk_arrival_airport")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ReservationService.Models.Replications.Airport", "DepartureAirport")
                        .WithMany("DepartureFlights")
                        .HasForeignKey("DepartureAirportId")
                        .HasConstraintName("fk_departure_airport")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("ReservationService.Models.Reservation", b =>
                {
                    b.HasOne("ReservationService.Models.Replications.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("ReservationService.Models.ReservationTicket", b =>
                {
                    b.HasOne("ReservationService.Models.Reservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("fk_reservation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ReservationService.Models.Replications.Airport", b =>
                {
                    b.Navigation("ArrivalFlights");

                    b.Navigation("DepartureFlights");
                });

            modelBuilder.Entity("ReservationService.Models.Replications.AirportAddress", b =>
                {
                    b.Navigation("Airport");
                });

            modelBuilder.Entity("ReservationService.Models.Reservation", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
